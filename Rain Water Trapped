public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int trap(final int[] A) {
        int n = A.length;
        int leftmaxarr[] = new int[n]; // max on left side for every elements
        leftmaxarr[0] = 0; // there will be no element left of A[0] that's why
        
        for(int i=1; i<n; i++){
            leftmaxarr[i] = Math.max(leftmaxarr[i-1], A[i-1]) ;
        }
        
        int rightmaxarr[] = new int[n];  // max on right side for every elements 
        rightmaxarr[n-1] = 0;  // there will be no element right of A[n-1] that's why
        
        for(int i=n-2; i>=0; i--){
            rightmaxarr[i] = Math.max(rightmaxarr[i+1], A[i+1]) ;
        }
        
        int diffarr[] = new int[n]; // diff = min(left, right)-A[i]
        
        for(int i=0; i<n; i++){
            diffarr[i] = Math.min(leftmaxarr[i], rightmaxarr[i])-A[i];
            if(diffarr[i]<0) diffarr[i] = 0; // negative mean no water trap on that building
        }
        int trap = 0;
        for(Integer i : diffarr){
            trap += i;
        }
        return trap;
    }
}
